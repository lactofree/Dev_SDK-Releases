이 가이드는 HIVE SDK 사용자가 AD(X)에서 제공하는 Unity 패키지를 적용하는 과정에서 발생하는 오류를 수정하고, 사용의 편의성을 돕기 위해 작성된 HIVE Ad Manager 적용과정을 소개합니다.

## AD(X) 배포 버전과의 차이

<h4 id="difference">AD(X) 배포 버전과의 비교</h4>

AD(X) 배포 버전과 차이점
Android
포함된 AD(X)의 Android 라이브러리를 삭제하였습니다. AD(X) 배포버전은 Android 라이브러리를 포함한 상태로 배포하고 있어 다른 라이브러리 플러그인과 충돌이 발생할 가능성이 있습니다.
AD(X)의 Android 라이브러리를 빌드시점에 적용될 수 있도록 AD(X)의  유니티 패키지에 포함된 ‘ADXDependencies.xml’ 파일을 수정하여 제공합니다.



iOS
변경사항 없음
AD(X) SDK
변경사항 없음
ADMOB/Ads Manager SDK
변경사항 없음
MoPub SDK
변경사항 없음
External Dependency Manager for Unity
구버전인 Google Play Service Resolver를 대체하여 제공합니다.
HIVE Ad Manager API
AdMob의 보상형 광고(Rewarded Ad) API를 캡슐화 하여 제공합니다.
HIVE SDK가 포함된 상태에서, Hive AdManager를 통해 보상형 광고 시청을 수행한다면, 보상형 광고 시청 종료 후 HIVE Analytics에 자동으로 전송이 됩니다.
AD(X)의 API를 캡슐화하여 제공합니다.
HIVE Ad Manager Example
Unity Scene을 포함하여 적용 예제를 제공합니다.
아래는 샘플앱의 시연영상입니다.

적용 예제는 AdMob의 테스트 광고 키가 설정되어 있습니다.


&nbsp;

## 제공하는 기능
AD(X)에서 제공하는 광고모듈은 AdMob/MoPub SDK를 활용해 구현되어 있습니다. 다시 말해, AD(X)에서 제공하는 별도 인터페이스를 제외한 광고 구현과 시청은 AdMob/MoPub SDK를 이용해 구현할 수 있습니다.  
RewaredAd
AD(X)는 광고의 노출에 대한 API를 제공하지 않고 AdMob의 가이드를 따르도록 하고있습니다. 아래는 AD(X), AdMob, HIVE AdManager의 사용가이드 입니다.

<h4 id="adx">AD(X)</h4>

**Rewarded Video**: [https://github.com/adxcorp/ADXLibrary_Integration/wiki/ADXUnity#rewarded-video](https://github.com/adxcorp/ADXLibrary_Integration/wiki/ADXUnity#rewarded-video)

1. 보상형 광고 초기화
<pre>
#if UNITY_ANDROID
string adUnitId = "<REWARDEDVIDEO_ADUNIT_ID>";
#elif UNITY_IPHONE
string adUnitId = "<REWARDEDVIDEO_ADUNIT_ID>";
#else
string adUnitId = "unexpected_platform";
#endif

rewardedAd = new RewardedAd(adUnitId);

rewardedAd.OnAdLoaded += HandleRewardedAdLoaded;
rewardedAd.OnAdFailedToLoad += HandleRewardedAdFailedToLoad;
rewardedAd.OnAdOpening += HandleRewardedAdOpening;
rewardedAd.OnAdFailedToShow += HandleRewardedAdFailedToShow;
rewardedAd.OnUserEarnedReward += HandleUserEarnedReward;
rewardedAd.OnAdClosed += HandleRewardedAdClosed;
</pre>

2. 보상형 광고 로딩
<pre>
if (ADXGDPRManager.GetConsentState () == 2) {
     // Create an empty ad request.
     AdRequest request = new AdRequest.Builder ()
                                      .AddExtra ("npa", "1")
                                      .Build ();
     rewardedAd.LoadAd(request);
} else {
     // Create an empty ad request.
     AdRequest request = new AdRequest.Builder ()
                                      .Build ();
     rewardedAd.LoadAd(request);
}
</pre>

3. 보상형 광고 재생
<pre>
if (rewardedAd.IsLoaded()) {
     rewardedAd.Show();
}
</pre>


<h4 id="admob">AdMob</h4>

**Rewarded Ads**: [https://developers.google.com/admob/unity/rewarded-ads?hl=ko](https://developers.google.com/admob/unity/rewarded-ads?hl=ko)

1. 보상형 광고 초기화 및 로딩

<pre>
string adUnitId;
#if UNITY_ANDROID
    adUnitId = "ca-app-pub-3940256099942544/5224354917";
#elif UNITY_IPHONE
    adUnitId = "ca-app-pub-3940256099942544/1712485313";
#else
    "adUnitId = "unexpected_platform";
#endif

this.rewardedAd = new RewardedAd(adUnitId);

// Called when an ad request has successfully loaded.
this.rewardedAd.OnAdLoaded += HandleRewardedAdLoaded;
// Called when an ad request failed to load.
this.rewardedAd.OnAdFailedToLoad += HandleRewardedAdFailedToLoad;
// Called when an ad is shown.
this.rewardedAd.OnAdOpening += HandleRewardedAdOpening;
// Called when an ad request failed to show.
this.rewardedAd.OnAdFailedToShow += HandleRewardedAdFailedToShow;
// Called when the user should be rewarded for interacting with the ad.
this.rewardedAd.OnUserEarnedReward += HandleUserEarnedReward;
// Called when the ad is closed.
this.rewardedAd.OnAdClosed += HandleRewardedAdClosed;

// Create an empty ad request.
AdRequest request = new AdRequest.Builder().Build();
// Load the rewarded ad with the request.
this.rewardedAd.LoadAd(request);
</pre>

2. 보상형 광고 재생

<pre>
if (this.rewardedAd.IsLoaded()) {
     this.rewardedAd.Show();
}
</pre>

<h4 id="admanager">HIVE AdManager</h4>

1. 보상형 광고 초기화
<pre>
EventHandlers eventHandlers = new EventHandlers.Builder()
                                               .OnAdLoaded(OnAdLoadedRV)
                                               .OnAdFailedToLoad(OnAdFailedToLoadRV)
                                               .OnAdOpening(OnAdOpeningRV)
                                               .OnAdFailedToShow(OnAdFailedToShowRV)
                                               .OnAdClosed(OnAdClosedRV)
                                               .OnUserEarnedReward(OnUserEarnedRewardRV)
                                               .Build();
HiveAdManager.RewardVideo.Initialize(rewardVideoUnitId, eventHandlers);
</pre>

2. 보상형 광고 로딩
<pre>
AdRequest request;
if (HiveAdManager.GetConsentState() == 2)
{
    request = new AdRequest.Builder()
                           .AddExtra("npa","1")
                           .Build();
}
else
{
    request = new AdRequest.Builder()
                           .Build();
}

HiveAdManager.RewardVideo.Load(request);
</pre>

3. 보상형 광고 재생
<pre>
if( HiveAdManager.RewardVideo.IsLoaded() ) {
    HiveAdManager.RewardVideo.Show();
}
</pre>

&nbsp;


## HIVE SDK 구버전 적용하기

iOS용 HIVE SDK에는 Facebook SDK를 포함해 배포하고 있어 버전 차이로 충돌이 발생할 수 있습니다. 이를 방지하려면 HIVE SDK에 포함된 Facebook SDK 구성요소를 제거하고 CocoaPods으로 설치할 수 있도록 변경해야 합니다. HIVE SDK 버전에 따라 호환 가능한 Facebook SDK 버전이 다르니 현재 적용한 HIVE SDK의 서드파티 라이브러리 목록에서 버전을 확인해보세요. 아래는 HIVE SDK v4.11.x에 사용하는 Facebook SDK를 설정한다고 가정한 내용입니다. ADXDependencies.xml 파일에 아래 내용을 추가하세요. 

<pre>
  <iosPod name="FBSDKCoreKit" version="~> 5.6" bitcodeEnabled="true" minTargetSdk="9.0" />
  <iosPod name="FBSDKLoginKit" version="~> 5.6" bitcodeEnabled="true" minTargetSdk="9.0" />
  <iosPod name="FBSDKShareKit" version="~> 5.6" bitcodeEnabled="true" minTargetSdk="9.0" />
</pre>
